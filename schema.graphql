input CreateProfileInput {
  handle: String!
  name: String!
}

input CreateSpaceInput {
  name: String!
  slug: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteSpaceInput {
  spaceId: String!
}

input FinalizeImageUploadInput {
  path: String!
}

type Image {
  id: String!
  path: String!
  placeholder: String!
  sizes: [Int!]!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProfile(input: CreateProfileInput!): Profile!
  createSpace(input: CreateSpaceInput!): Space!
  deleteSpace(input: DeleteSpaceInput!): Space!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  login(input: LoginInput!): Profile!
  logout: Profile!
  noop: String!
  prepareImageUpload(input: PrepareImageUploadInput!): PrepareImageUploadPayload!
  signup(input: SignupInput!): Profile!
  switchProfile(input: SwitchProfileInput!): Profile!
}

input PrepareImageUploadInput {
  name: String!
}

type PrepareImageUploadPayload {
  path: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image
  handle: String!
  id: String!
  name: String!
  spaces: [Space!]!
  user: User!
}

type Query {
  db: String!
  featuredImage: Image
  greeting: String!
  images: [Image!]!
  me: Profile!
  meOrNull: Profile
  profile(handle: String!): Profile!
  space(slug: String!): Space!
}

input SignupInput {
  email: String!
  isAgreed: Boolean!
  name: String!
  password: String!
}

type Space {
  id: String!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  name: String!
  slug: String!
}

type SpaceMember {
  canAccessDashboard: Boolean!
  canPublish: Boolean!
  id: String!
  profile: Profile!
  role: SpaceMemberRole!
  space: Space!
}

enum SpaceMemberRole {
  MEMBER
  OWNER
}

type Subscription {
  countdown: Int!
}

input SwitchProfileInput {
  profileId: String!
}

type User {
  email: String!
  id: String!
  profiles: [Profile!]!
}

"""Represents NULL values"""
scalar Void
