generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("PRIVATE_DATABASE_URL")
}

model Image {
  id          String   @id
  name        String
  format      String
  fileSize    Int      @map("file_size")
  blobSize    Int      @map("blob_size")
  width       Int
  height      Int
  path        String
  color       String
  placeholder String
  hash        String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  profileUsingThisAsAvatar Profile?

  usingPost PostImage[]

  @@index([id, path, color])
  @@map("images")
}

model Session {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("sessions")
}

model Space {
  id        String     @id
  slug      String
  name      String
  state     SpaceState
  createdAt DateTime   @default(now()) @map("created_at") @db.Timestamptz

  members SpaceMember[]
  posts   Post[]

  @@index([slug, state])
  @@map("spaces")
}

model SpaceMember {
  id        String          @id
  spaceId   String          @map("space_id")
  space     Space           @relation(fields: [spaceId], references: [id])
  userId    String          @map("user_id")
  user      User            @relation(fields: [userId], references: [id])
  profileId String          @map("profile_id")
  profile   Profile         @relation(fields: [profileId], references: [id])
  role      SpaceMemberRole
  createdAt DateTime        @default(now()) @map("created_at") @db.Timestamptz

  @@unique([spaceId, userId])
  @@map("space_members")
}

model Profile {
  id        String   @id
  name      String
  avatarId  String   @unique @map("avatar_id")
  avatar    Image    @relation(fields: [avatarId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  spaces SpaceMember[]
  user   User?

  @@map("profiles")
}

model User {
  id        String    @id
  email     String    @unique
  profileId String    @unique @map("profile_id")
  profile   Profile   @relation(fields: [profileId], references: [id])
  state     UserState
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  password UserPassword?
  sessions Session[]
  spaces   SpaceMember[]
  ssos     UserSSO[]
  posts    Post[]

  @@map("users")
}

model UserSSO {
  id             String          @id
  userId         String          @map("user_id")
  user           User            @relation(fields: [userId], references: [id])
  provider       UserSSOProvider
  providerUserId String          @map("provider_user_id")
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, provider])
  @@unique([provider, providerUserId])
  @@map("user_ssos")
}

model UserPassword {
  id        String   @id
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  hash      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("user_passwords")
}

model Tag {
  id          String @id
  name        String
  description String @default("")
  count       Int    @default(0)

  posts PostTag[]

  @@map("tags")
}

model Post {
  id        String    @id
  spaceId   String    @map("space_id")
  space     Space     @relation(fields: [spaceId], references: [id])
  userId    String    @map("user_id") // 수익금 정산을 위해 필요?
  user      User      @relation(fields: [userId], references: [id])
  title     String
  subtitle  String?
  content   String
  views     Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz // 글 수정가능성 있으니까
  adultOnly Boolean   @default(false) @map("adult_only")
  state     PostState @default(ACTIVE)

  tags   PostTag[]
  images PostImage[]

  @@map("posts")
}

model PostTag {
  id        String   @id
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  tagId     String   @map("tag_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  updatedAt DateTime @updatedAt @map("created_at") @db.Timestamptz

  @@unique([postId, tagId])
  @@map("post_tags")
}

model PostImage {
  postId  String @map("post_id")
  post    Post   @relation(fields: [postId], references: [id])
  imageId String @map("image_id")
  image   Image  @relation(fields: [imageId], references: [id])

  @@id([postId, imageId])
  @@map("post_images")
}

enum SpaceState {
  ACTIVE
  INACTIVE

  @@map("_space_state")
}

enum SpaceMemberRole {
  OWNER
  MEMBER

  @@map("_space_member_role")
}

enum UserSSOProvider {
  GOOGLE
  NAVER

  @@map("_user_sso_provider")
}

enum UserState {
  ACTIVE
  INACTIVE

  @@map("_user_state")
}

enum PostState {
  ACTIVE
  INACTIVE

  @@map("_post_state")
}
