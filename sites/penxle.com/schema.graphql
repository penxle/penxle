"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input CreatePostInput {
  content: String!
  spaceId: String!
  subtitle: String
  title: String!
}

input CreateSpaceInput {
  name: String!
  slug: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteSpaceInput {
  spaceId: ID!
}

input FinalizeImageUploadInput {
  key: String!
}

type Image {
  color: String!
  id: ID!
  path: String!
  placeholder: String!
}

input IssueSSOAuthorizationUrlInput {
  provider: UserSSOProvider!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!
  createSpace(input: CreateSpaceInput!): Space!
  deleteSpace(input: DeleteSpaceInput!): Space!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  issueSSOAuthorizationUrl(input: IssueSSOAuthorizationUrlInput!): String!
  login(input: LoginInput!): User!
  logout: User!
  prepareImageUpload(input: PrepareImageUploadInput!): PrepareImageUploadPayload!
  signUp(input: SignUpInput!): User!
  updateUserProfile(input: UpdateUserProfileInput!): Profile!
}

type Post {
  content: String!
  createdAt: DateTime!
  id: ID!
  space: Space!
  subtitle: String
  title: String!
  updatedAt: DateTime!
  views: Int!
}

input PrepareImageUploadInput {
  name: String!
}

type PrepareImageUploadPayload {
  key: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image!
  id: ID!
  name: String!
}

type Query {
  authLayoutBackgroundImage: Image
  me: User!
  meOrNull: User
  post(id: ID!): Post!
  randomAvatars: [String!]!
  space(slug: String!): Space!
}

input SignUpInput {
  email: String!
  isAgreed: Boolean!
  name: String!
  password: String!
}

type Space {
  id: ID!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  name: String!
  posts: [Post!]!
  slug: String!
}

type SpaceMember {
  id: ID!
  profile: Profile!
  role: SpaceMemberRole!
  space: Space!
}

enum SpaceMemberRole {
  MEMBER
  OWNER
}

input UpdateUserProfileInput {
  name: String!
}

type User {
  email: String!
  id: ID!
  profile: Profile!
  spaces: [Space!]!
}

enum UserSSOProvider {
  GOOGLE
  NAVER
}
