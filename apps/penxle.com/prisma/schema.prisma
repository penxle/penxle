datasource db {
  provider = "postgresql"

  url       = env("PRIVATE_DATABASE_URL")
  directUrl = env("PRIVATE_DATABASE_DIRECT_URL")
}

generator pothos {
  provider = "prisma-pothos-types"
}

generator prisma {
  provider = "prisma-client-js"

  previewFeatures = ["nativeDistinct", "relationJoins"]
}

model BookmarkGroup {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  posts BookmarkGroupPost[]

  @@map("bookmarks")
}

model BookmarkGroupPost {
  id              String        @id
  bookmarkGroupId String        @map("bookmark_id")
  bookmarkGroup   BookmarkGroup @relation(fields: [bookmarkGroupId], references: [id])
  postId          String        @map("post_id")
  post            Post          @relation(fields: [postId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz

  @@unique([bookmarkGroupId, postId])
  @@map("bookmark_posts")
}

model File {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  name      String
  format    String
  size      Int
  path      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("files")
}

model Image {
  id          String   @id
  userId      String?  @map("user_id")
  user        User?    @relation(fields: [userId], references: [id])
  name        String
  format      String
  size        Int
  width       Int
  height      Int
  path        String
  color       String
  placeholder String
  hash        String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  profilesUsingThisAsAvatar                 Profile[]
  spacesUsingThisAsIcon                     Space[]
  postRevisionsUsingThisAsCroppedThumbnail  PostRevision[]
  postRevisionsUsingThisAsOriginalThumbnail PostRevision[] @relation("origin")

  @@map("images")
}

model PointBalance {
  id         String         @id
  userId     String         @map("user_id")
  user       User           @relation(fields: [userId], references: [id])
  purchaseId String?        @map("purchase_id")
  purchase   PointPurchase? @relation(fields: [purchaseId], references: [id])
  kind       PointKind
  initial    Int
  leftover   Int
  createdAt  DateTime       @default(now()) @map("created_at") @db.Timestamptz
  expiresAt  DateTime       @map("expires_at") @db.Timestamptz

  @@index([userId, kind, createdAt])
  @@map("point_balances")
}

model PointPurchase {
  id            String             @id
  userId        String             @map("user_id")
  user          User               @relation(fields: [userId], references: [id])
  pointAmount   Int                @map("point_amount")
  paymentAmount Int                @map("payment_amount")
  paymentMethod PaymentMethod      @map("payment_method")
  paymentKey    String             @unique @map("payment_key")
  paymentData   Json               @map("payment_data")
  paymentResult Json?              @map("payment_result")
  state         PointPurchaseState
  createdAt     DateTime           @default(now()) @map("created_at") @db.Timestamptz
  expiresAt     DateTime           @map("expires_at") @db.Timestamptz
  completedAt   DateTime?          @map("completed_at") @db.Timestamptz

  balances PointBalance[]

  @@map("point_purchases")
}

model PointTransaction {
  id        String                @id
  userId    String                @map("user_id")
  user      User                  @relation(fields: [userId], references: [id])
  cause     PointTransactionCause
  amount    Int
  targetId  String?               @map("target_id")
  createdAt DateTime              @default(now()) @map("created_at") @db.Timestamptz

  @@map("point_transactions")
}

model Post {
  id                  String        @id
  permalink           String        @unique
  spaceId             String        @map("space_id")
  space               Space         @relation(fields: [spaceId], references: [id])
  memberId            String        @map("member_id")
  member              SpaceMember   @relation(fields: [memberId], references: [id])
  userId              String        @map("user_id")
  user                User          @relation(fields: [userId], references: [id])
  publishedRevisionId String?       @map("published_revision_id")
  publishedRevision   PostRevision? @relation(name: "published_revision", fields: [publishedRevisionId], references: [id])

  state                  PostState
  contentFilters         ContentFilterCategory[] @map("content_filters")
  visibility             PostVisibility
  discloseStats          Boolean                 @map("disclose_stats")
  receiveFeedback        Boolean                 @map("receive_feedback")
  receivePatronage       Boolean                 @map("receive_patronage")
  receiveTagContribution Boolean                 @map("receive_tag_contribution")
  password               String?
  createdAt              DateTime                @default(now()) @map("created_at") @db.Timestamptz
  publishedAt            DateTime?               @map("published_at") @db.Timestamptz

  likes     PostLike[]
  revisions PostRevision[]
  views     PostView[]
  purchases PostPurchase[]
  reactions PostReaction[]
  bookmarks BookmarkGroupPost[]

  @@index([publishedAt])
  @@map("posts")
}

model PostLike {
  id        String   @id
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([postId, userId])
  @@map("post_likes")
}

model PostPurchase {
  id         String       @id
  postId     String       @map("post_id")
  post       Post         @relation(fields: [postId], references: [id])
  revisionId String       @map("revision_id")
  revision   PostRevision @relation(fields: [revisionId], references: [id])
  userId     String       @map("user_id")
  user       User         @relation(fields: [userId], references: [id])
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz

  @@unique([postId, userId])
  @@map("post_purchases")
}

model PostReaction {
  id        String   @id
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  emoji     String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([postId, userId, emoji])
  @@index([createdAt])
  @@map("post_reactions")
}

model PostRevision {
  id            String               @id
  postId        String               @map("post_id")
  post          Post                 @relation(fields: [postId], references: [id])
  userId        String               @map("user_id")
  user          User                 @relation(fields: [userId], references: [id])
  freeContentId String               @map("free_content_id")
  freeContent   PostRevisionContent  @relation(name: "free_content", fields: [freeContentId], references: [id])
  paidContentId String?              @map("paid_content_id")
  paidContent   PostRevisionContent? @relation(name: "paid_content", fields: [paidContentId], references: [id])

  contentKind PostRevisionContentKind
  price       Int?

  croppedThumbnailId  String? @map("cropped_thumbnail_id")
  croppedThumbnail    Image?  @relation(fields: [croppedThumbnailId], references: [id])
  originalThumbnailId String? @map("original_thumbnail_id")
  originalThumbnail   Image?  @relation("origin", fields: [originalThumbnailId], references: [id])
  thumbnailBounds     Json?

  kind      PostRevisionKind
  title     String
  subtitle  String?
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime         @default(now()) @map("updated_at") @db.Timestamptz

  purchases                         PostPurchase[]
  tags                              PostRevisionTag[]
  postsUsingThisAsPublishedRevision Post[]            @relation(name: "published_revision")

  @@index([createdAt])
  @@map("post_revisions")
}

model PostRevisionContent {
  id        String   @id
  hash      String   @unique
  data      Json
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  revisionsUsingThisAsFreeContent PostRevision[] @relation("free_content")
  revisionsUsingThisAsPaidContent PostRevision[] @relation("paid_content")

  @@map("post_revision_contents")
}

model PostRevisionTag {
  id         String       @id
  revisionId String       @map("revision_id")
  revision   PostRevision @relation(fields: [revisionId], references: [id])
  tagId      String       @map("tag_id")
  tag        Tag          @relation(fields: [tagId], references: [id])
  createdAt  DateTime     @default(now()) @map("created_at") @db.Timestamptz

  @@unique([revisionId, tagId])
  @@map("post_revision_tags")
}

model PostView {
  id        String   @id
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id])
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])
  deviceId  String   @map("device_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  viewedAt  DateTime @default(now()) @map("viewed_at") @db.Timestamptz

  @@unique([userId, postId])
  @@map("post_views")
}

model ProvisionedUser {
  id        String                    @id
  token     String                    @unique
  email     String
  provider  UserSingleSignOnProvider?
  principal String?
  name      String?
  avatarUrl String?                   @map("avatar_url")
  createdAt DateTime                  @default(now()) @map("created_at") @db.Timestamptz

  @@map("provisioned_users")
}

model Profile {
  id        String   @id
  name      String
  avatarId  String   @map("avatar_id")
  avatar    Image    @relation(fields: [avatarId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  spaceMasquerade SpaceMasquerade?
  spaceMembers    SpaceMember[]
  user            User?

  @@map("profiles")
}

model Space {
  id          String          @id
  slug        String
  name        String
  description String?
  iconId      String          @map("icon_id")
  icon        Image           @relation(fields: [iconId], references: [id])
  visibility  SpaceVisibility
  state       SpaceState
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz

  members       SpaceMember[]
  invitations   SpaceMemberInvitation[]
  followers     SpaceFollow[]
  blockedUsers  SpaceUserBlock[]
  // tags          SpaceTag[]
  externalLinks SpaceExternalLink[]
  posts         Post[]
  masquerades   SpaceMasquerade[]
  userMutes     UserSpaceMute[]

  @@index([slug, state])
  @@map("spaces")
}

model SpaceExternalLink {
  id        String   @id
  spaceId   String   @map("space_id")
  space     Space    @relation(fields: [spaceId], references: [id])
  url       String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("space_external_links")
}

model SpaceFollow {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  spaceId   String   @map("space_id")
  space     Space    @relation(fields: [spaceId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, spaceId])
  @@map("space_follows")
}

model SpaceUserBlock {
  id        String   @id
  spaceId   String   @map("space_id")
  space     Space    @relation(fields: [spaceId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  reason    String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("space_user_blocks")
}

model SpaceMasquerade {
  id        String   @id
  spaceId   String   @map("space_id")
  space     Space    @relation(fields: [spaceId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  profileId String   @unique @map("profile_id")
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([spaceId, userId])
  @@map("space_masquerades")
}

model SpaceMember {
  id        String           @id
  spaceId   String           @map("space_id")
  space     Space            @relation(fields: [spaceId], references: [id])
  userId    String           @map("user_id")
  user      User             @relation(fields: [userId], references: [id])
  profileId String           @map("profile_id")
  profile   Profile          @relation(fields: [profileId], references: [id])
  state     SpaceMemberState
  role      SpaceMemberRole
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz

  posts Post[]

  @@unique([spaceId, userId])
  @@map("space_members")
}

model SpaceMemberInvitation {
  id             String                     @id
  spaceId        String                     @map("space_id")
  space          Space                      @relation(fields: [spaceId], references: [id])
  sentUserId     String                     @map("sent_user_id")
  sentUser       User                       @relation(name: "spaceMemberInvitationSent", fields: [sentUserId], references: [id])
  receivedUserId String?                    @map("received_user_id")
  receivedUser   User?                      @relation(name: "spaceMemberInvitationReceived", fields: [receivedUserId], references: [id])
  receivedEmail  String                     @map("received_email")
  role           SpaceMemberRole
  state          SpaceMemberInvitationState
  createdAt      DateTime                   @default(now()) @map("created_at") @db.Timestamptz
  respondedAt    DateTime?                  @map("responded_at") @db.Timestamptz

  @@map("space_member_invitations")
}

// model SpaceTag {
//   id        String   @id
//   spaceId   String   @map("space_id")
//   space     Space    @relation(fields: [spaceId], references: [id])
//   tagId     String   @map("tag_id")
//   tag       Tag      @relation(fields: [tagId], references: [id])
//   createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
// }

model Tag {
  id        String   @id
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  wiki          TagWiki?
  parents       TagHierarchy[]    @relation("parents")
  children      TagHierarchy[]    @relation("children")
  userMutes     UserTagMute[]
  postRevisions PostRevisionTag[]
  followers     TagFollow[]
  // spacesUsingThis SpaceTag[]

  @@index(createdAt)
  @@map("tags")
}

model TagFollow {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  tagId     String   @map("tag_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, tagId])
  @@map("tag_follows")
}

model TagHierarchy {
  id          String   @id
  parentTagId String   @unique @map("parent_tag_id")
  parentTag   Tag      @relation("parents", fields: [parentTagId], references: [id])
  childTagId  String   @unique @map("child_tag_id")
  childTag    Tag      @relation("children", fields: [childTagId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("tag_hierarchies")
}

model TagWiki {
  id        String   @id
  tagId     String   @unique @map("tag_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  revisions TagWikiRevision[]

  @@map("tag_wikis")
}

model TagWikiRevision {
  id        String   @id
  tagWikiId String   @map("tag_wiki_id")
  tagWiki   TagWiki  @relation(fields: [tagWikiId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@index([createdAt])
  @@map("tag_wiki_revisions")
}

model User {
  id        String    @id
  email     String
  profileId String    @unique @map("profile_id")
  profile   Profile   @relation(fields: [profileId], references: [id])
  state     UserState
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // 주로 쓰이는 릴레이션들
  contentFilterPreferences       UserContentFilterPreference[]
  marketingConsent               UserMarketingConsent?
  notificationPreferences        UserNotificationPreference[]
  personalIdentity               UserPersonalIdentity?
  pointBalances                  PointBalance[]
  pointPurchases                 PointPurchase[]
  pointTransactions              PointTransaction[]
  sessions                       UserSession[]
  singleSignOns                  UserSingleSignOn[]
  spaces                         SpaceMember[]
  tagMutes                       UserTagMute[]
  sentSpaceMemberInvitations     SpaceMemberInvitation[]       @relation("spaceMemberInvitationSent")
  receivedSpaceMemberInvitations SpaceMemberInvitation[]       @relation("spaceMemberInvitationReceived")
  followedSpaces                 SpaceFollow[]
  postRevisions                  PostRevision[]
  viewedPosts                    PostView[]
  likedPosts                     PostLike[]
  posts                          Post[]
  mutedSpaces                    UserSpaceMute[]
  postPurchases                  PostPurchase[]
  followedTags                   TagFollow[]

  // PSL 선언을 위한 릴레이션들 (거의 쓰이지 않음)
  authoredTagWikiRevisions TagWikiRevision[]
  emailVerifications       UserEmailVerification[]
  uploadedFiles            File[]
  uploadedImages           Image[]
  spaceBlockedBy           SpaceUserBlock[]
  spaceMasquerades         SpaceMasquerade[]
  postReactions            PostReaction[]
  bookmarks                BookmarkGroup[]

  @@index([email, state])
  @@map("users")
}

model UserContentFilterPreference {
  id        String                @id
  userId    String                @map("user_id")
  user      User                  @relation(fields: [userId], references: [id])
  category  ContentFilterCategory
  action    ContentFilterAction
  createdAt DateTime              @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, category])
  @@map("user_content_filter_preferences")
}

model UserEmailVerification {
  id        String                    @id
  userId    String?                   @map("user_id")
  user      User?                     @relation(fields: [userId], references: [id])
  email     String
  token     String                    @unique
  code      String?
  kind      UserEmailVerificationKind
  createdAt DateTime                  @default(now()) @map("created_at") @db.Timestamptz
  expiresAt DateTime                  @map("expires_at") @db.Timestamptz

  @@map("user_email_verifications")
}

model UserMarketingConsent {
  id        String   @id
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("user_marketing_consents")
}

model UserNotificationPreference {
  id        String                   @id
  userId    String                   @map("user_id")
  user      User                     @relation(fields: [userId], references: [id])
  category  UserNotificationCategory
  method    UserNotificationMethod
  opted     Boolean
  createdAt DateTime                 @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, category, method])
  @@map("user_notification_preferences")
}

model UserPersonalIdentity {
  id          String   @id
  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  name        String
  birthday    DateTime @db.Timestamptz
  phoneNumber String   @map("phone_number")
  ci          String
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("user_personal_identities")
}

model UserSingleSignOn {
  id        String                   @id
  userId    String                   @map("user_id")
  user      User                     @relation(fields: [userId], references: [id])
  provider  UserSingleSignOnProvider
  principal String
  email     String
  createdAt DateTime                 @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, provider])
  @@unique([provider, principal])
  @@map("user_single_sign_ons")
}

model UserSession {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@map("user_sessions")
}

model UserSpaceMute {
  id        String   @id
  spaceId   String   @map("space_id")
  space     Space    @relation(fields: [spaceId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, spaceId])
  @@map("user_space_mutes")
}

model UserTagMute {
  id        String   @id
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  tagId     String   @map("tag_id")
  tag       Tag      @relation(fields: [tagId], references: [id])
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@unique([userId, tagId])
  @@map("user_tag_mute")
}

enum ContentFilterCategory {
  ADULT
  VIOLENCE
  CRUELTY
  HORROR
  GAMBLING
  TRAUMA
  CRIME
  PHOBIA
  INSULT
  GROSSNESS
  OTHER

  @@map("_content_filter_category")
}

enum ContentFilterAction {
  WARN
  EXPOSE

  @@map("_content_filter_action")
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_ACCOUNT
  VIRTUAL_BANK_ACCOUNT
  PHONE_BILL
  GIFTCARD_CULTURELAND
  GIFTCARD_SMARTCULTURE
  GIFTCARD_BOOKNLIFE
  PAYPAL

  @@map("_payment_method")
}

enum PointKind {
  PAID
  FREE

  @@map("_point_kind")
}

enum PointPurchaseState {
  PENDING
  COMPLETED
  FAILED
  UNDONE

  @@map("_point_purchase_state")
}

enum PointTransactionCause {
  INTERNAL
  PURCHASE
  UNDO_PURCHASE
  REFUND
  EXPIRE
  UNLOCK_CONTENT
  PATRONIZE

  @@map("_point_transaction_cause")
}

enum PostRevisionKind {
  AUTO_SAVE
  MANUAL_SAVE
  PUBLISHED
  ARCHIVED

  @@map("_post_revision_kind")
}

enum PostRevisionContentKind {
  ARTICLE
  GALLERY

  @@map("_post_revision_content_kind")
}

enum PostState {
  DRAFT
  PUBLISHED
  DELETED

  @@map("_post_state")
}

enum PostVisibility {
  PUBLIC
  SPACE
  UNLISTED

  @@map("_post_visibility")
}

enum PreferenceType {
  FAVORITE
  MUTE

  @@map("_preference_type")
}

enum SpaceMemberInvitationState {
  PENDING
  ACCEPTED
  IGNORED

  @@map("_space_member_invitation_state")
}

enum SpaceMemberRole {
  ADMIN
  MEMBER

  @@map("_space_member_role")
}

enum SpaceMemberState {
  ACTIVE
  INACTIVE

  @@map("_space_member_state")
}

enum SpaceState {
  ACTIVE
  INACTIVE

  @@map("_space_state")
}

enum SpaceVisibility {
  PUBLIC
  PRIVATE

  @@map("_space_visibility")
}

enum UserEmailVerificationKind {
  USER_LOGIN
  USER_EMAIL_UPDATE

  @@map("_user_email_verification_kind")
}

enum UserNotificationCategory {
  COMMENT
  REPLY
  SUBSCRIBE
  TAG_EDIT
  TREND
  PURCHASE
  DONATE
  TAG_WIKI_EDIT
  ALL

  @@map("_user_notification_category")
}

enum UserNotificationMethod {
  EMAIL
  WEBSITE

  @@map("_user_notification_method")
}

enum UserSingleSignOnProvider {
  GOOGLE
  NAVER

  @@map("_user_single_sign_on_provider")
}

enum UserState {
  ACTIVE
  INACTIVE

  @@map("_user_state")
}
