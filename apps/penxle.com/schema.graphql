input AcceptSpaceMemberInvitationInput {
  invitationId: ID!
  profileAvatarId: ID
  profileName: String
}

enum AuthScope {
  STAFF
  USER
}

type BookmarkGroup {
  id: ID!
  name: String!
  postCount: Int!
  posts: [BookmarkGroupPost!]!
}

type BookmarkGroupPost {
  createdAt: DateTime!
  id: ID!
  post: Post!
}

input BookmarkPostInput {
  postId: ID!
}

enum ContentFilterAction {
  EXPOSE
  WARN
}

enum ContentFilterCategory {
  ADULT
  CRIME
  CRUELTY
  GAMBLING
  GROSSNESS
  HORROR
  INSULT
  OTHER
  PHOBIA
  TRAUMA
  VIOLENCE
}

input CreatePostReactionInput {
  emoji: String!
  postId: ID!
}

input CreateSpaceInput {
  iconId: ID
  isPublic: Boolean! = true
  name: String!
  profileAvatarId: ID
  profileName: String
  slug: String!
}

input CreateSpaceMemberInvitationInput {
  email: String!
  role: SpaceMemberRole!
  spaceId: ID!
}

input CreateUserInput {
  marketingConsent: Boolean!
  name: String!
  termsConsent: Boolean!
  token: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeletePostInput {
  postId: ID!
}

input DeletePostReactionInput {
  emoji: String!
  postId: ID!
}

input DeleteSpaceInput {
  spaceId: ID!
}

input DeleteSpaceProfileInput {
  spaceId: ID!
}

type File {
  id: ID!
  name: String!
  size: Int!
  url: String!
}

input FinalizeFileUploadInput {
  key: String!
  name: String!
}

input FinalizeImageUploadInput {
  bounds: JSON
  key: String!
  name: String!
}

type Flash {
  message: String!
  type: String!
}

input FollowSpaceInput {
  spaceId: ID!
}

input FollowTagInput {
  tagId: ID!
}

input IgnoreSpaceMemberInvitationInput {
  invitationId: ID!
}

type Image {
  height: Int!
  id: ID!
  placeholder: String!
  url: String!
  width: Int!
}

input IssueUserEmailAuthorizationUrlInput {
  code: String!
  email: String!
}

type IssueUserEmailAuthorizationUrlResult {
  url: String!
}

input IssueUserSingleSignOnAuthorizationUrlInput {
  provider: UserSingleSignOnProvider!
  type: UserSingleSignOnAuthorizationType!
}

type IssueUserSingleSignOnAuthorizationUrlResult {
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LeaveSpaceInput {
  spaceId: ID!
}

input LikePostInput {
  postId: ID!
}

input LoginUserInput {
  email: String!
}

type Mutation {
  acceptSpaceMemberInvitation(input: AcceptSpaceMemberInvitationInput!): SpaceMemberInvitation!
  bookmarkPost(input: BookmarkPostInput!): Post!
  createPostReaction(input: CreatePostReactionInput!): Post!
  createSpace(input: CreateSpaceInput!): Space!
  createSpaceMemberInvitation(input: CreateSpaceMemberInvitationInput!): SpaceMemberInvitation!
  createUser(input: CreateUserInput!): User!
  deletePost(input: DeletePostInput!): Post!
  deletePostReaction(input: DeletePostReactionInput!): Post!
  deleteSpace(input: DeleteSpaceInput!): Space!
  deleteSpaceProfile(input: DeleteSpaceProfileInput!): SpaceMember!
  finalizeFileUpload(input: FinalizeFileUploadInput!): File!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  followSpace(input: FollowSpaceInput!): Space!
  followTag(input: FollowTagInput!): Tag!
  ignoreSpaceMemberInvitation(input: IgnoreSpaceMemberInvitationInput!): SpaceMemberInvitation!
  issueUserEmailAuthorizationUrl(input: IssueUserEmailAuthorizationUrlInput!): IssueUserEmailAuthorizationUrlResult!
  issueUserSingleSignOnAuthorizationUrl(input: IssueUserSingleSignOnAuthorizationUrlInput!): IssueUserSingleSignOnAuthorizationUrlResult!
  leaveSpace(input: LeaveSpaceInput!): SpaceMember!
  likePost(input: LikePostInput!): Post!
  loginUser(input: LoginUserInput!): UserEmailVerification!
  logoutUser: Void
  muteSpace(input: MuteSpaceInput!): Space!
  muteTag(input: MuteTagInput!): Tag!
  prepareFileUpload: PrepareFileUploadResult!
  prepareImageUpload: PrepareImageUploadResult!
  publishPost(input: PublishPostInput!): Post!
  purchasePoint(input: PurchasePointInput!): PointPurchase!
  purchasePost(input: PurchasePostInput!): Post!
  removeSpaceMember(input: RemoveSpaceMemberInput!): SpaceMember
  restorePostRevision(input: RestorePostRevisionInput!): PostRevision!
  revisePost(input: RevisePostInput!): Post!
  reviseTagWiki(input: ReviseTagWikiInput!): TagWiki!
  setParentTag(input: SetParentTagInput!): Tag!
  unbookmarkPost(input: UnbookmarkPostInput!): Post!
  unfollowSpace(input: UnfollowSpaceInput!): Space!
  unfollowTag(input: UnfollowTagInput!): Tag!
  unlikePost(input: UnlikePostInput!): Post!
  unlinkUserSingleSignOn(input: UnlinkUserSingleSignOnInput!): User!
  unlockPasswordedPost(input: UnlockPasswordedPostInput!): Post!
  unmuteSpace(input: UnmuteSpaceInput!): Space!
  unmuteTag(input: UnmuteTagInput!): Tag!
  unsetParentTag(input: UnsetParentTagInput!): Tag!
  updatePostOptions(input: UpdatePostOptionsInput!): Post!
  updatePostView(input: UpdatePostViewInput!): Post!
  updateSpace(input: UpdateSpaceInput!): Space!
  updateSpaceProfile(input: UpdateSpaceProfileInput!): SpaceMember!
  updateUserContentFilterPreference(input: UpdateUserContentFilterPreferenceInput!): User!
  updateUserEmail(input: UpdateUserEmailInput!): Void
  updateUserMarketingConsent(input: UpdateUserMarketingConsentInput!): User!
  updateUserNotificationPreference(input: UpdateUserNotificationPreferenceInput!): User!
  updateUserProfile(input: UpdateUserProfileInput!): Profile!
}

input MuteSpaceInput {
  spaceId: ID!
}

input MuteTagInput {
  tagId: ID!
}

enum PaymentMethod {
  BANK_ACCOUNT
  CREDIT_CARD
  GIFTCARD_BOOKNLIFE
  GIFTCARD_CULTURELAND
  GIFTCARD_SMARTCULTURE
  PAYPAL
  PHONE_BILL
  VIRTUAL_BANK_ACCOUNT
}

enum PointKind {
  FREE
  PAID
}

type PointPurchase {
  expiresAt: DateTime!
  id: ID!
  paymentAmount: Int!
  paymentData: JSON!
  paymentMethod: PaymentMethod!
  paymentResult: JSON
  pointAmount: Int!
  state: PointPurchaseState!
}

enum PointPurchaseState {
  COMPLETED
  FAILED
  PENDING
  UNDONE
}

enum PointTransactionCause {
  EXPIRE
  INTERNAL
  PATRONIZE
  PURCHASE
  REFUND
  UNDO_PURCHASE
  UNLOCK_CONTENT
}

type Post {
  blurred: Boolean!
  bookmarked: Boolean!
  contentFilters: [ContentFilterCategory!]!
  createdAt: DateTime!
  discloseStats: Boolean!
  draftRevision(revisionId: ID): PostRevision!
  hasPassword: Boolean!
  id: ID!
  likeCount: Int!
  liked: Boolean!
  member: SpaceMember!
  permalink: String!
  publishedAt: DateTime
  publishedRevision: PostRevision
  purchasedAt: DateTime
  purchasedRevision: PostRevision @deprecated(reason: "Use PostPurchase.revision instead")
  reactions: [PostReaction!]!
  receiveFeedback: Boolean!
  receivePatronage: Boolean!
  receiveTagContribution: Boolean!
  revisions: [PostRevision!]!
  shortlink: String!
  space: Space!
  state: PostState!
  unlocked: Boolean!
  viewCount: Int!
  visibility: PostVisibility!
}

type PostReaction {
  emoji: String!
  id: ID!
  mine: Boolean!
}

type PostRevision {
  characterCount: Int!
  content: JSON!
  contentKind: PostRevisionContentKind!
  createdAt: DateTime!
  croppedThumbnail: Image
  id: ID!
  kind: PostRevisionKind!
  originalThumbnail: Image
  previewText: String!
  subtitle: String
  tags: [Tag!]!
  thumbnailBounds: JSON
  title: String!
  updatedAt: DateTime!
}

enum PostRevisionContentKind {
  ARTICLE
  GALLERY
}

enum PostRevisionKind {
  ARCHIVED
  AUTO_SAVE
  MANUAL_SAVE
  PUBLISHED
}

enum PostState {
  DELETED
  DRAFT
  PUBLISHED
}

enum PostVisibility {
  PUBLIC
  SPACE
  UNLISTED
}

type PrepareFileUploadResult {
  key: String!
  presignedUrl: String!
}

type PrepareImageUploadResult {
  key: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image!
  id: ID!
  name: String!
}

type ProvisionedUser {
  avatarUrl: String
  email: String!
  id: ID!
  name: String
}

input PublishPostInput {
  contentFilters: [ContentFilterCategory!]!
  discloseStats: Boolean!
  password: String
  receiveFeedback: Boolean!
  receivePatronage: Boolean!
  receiveTagContribution: Boolean!
  revisionId: ID!
  visibility: PostVisibility!
}

input PurchasePointInput {
  paymentMethod: PaymentMethod!
  pointAgreement: Boolean!
  pointAmount: Int!
}

input PurchasePostInput {
  postId: ID!
  revisionId: ID!
}

type Query {
  auth(scope: AuthScope!): Void
  authLayoutBackgroundImage: Image
  flash: Flash
  hello(name: String!): String!
  me: User
  pointPurchase(paymentKey: String!): PointPurchase!
  post(permalink: String!): Post!
  provisionedUser(token: String!): ProvisionedUser!
  randomAvatars: [String!]!
  randomIcons: [String!]!
  recentlyCreatedTags: [Tag!]!
  recentlyPublishedSpaces: [Space!]!
  recentlyPurchasedPosts: [Post!]!
  recentlyUsedTags: [Tag!]!
  recommendFeed(dateBefore: String): [Post!]!
  sampleImage: Image!
  sampleImages: [Image!]!
  space(slug: String!): Space!
  spaceFeed(dateBefore: String): [Post!]!
  tag(name: String!): Tag!
  tagFeed(dateBefore: String): [Post!]!
}

input RemoveSpaceMemberInput {
  spaceMemberId: ID!
}

input RestorePostRevisionInput {
  revisionId: ID!
}

input RevisePostInput {
  content: JSON!
  contentKind: PostRevisionContentKind! = ARTICLE
  postId: ID
  revisionKind: PostRevisionKind!
  spaceId: ID!
  subtitle: String
  tags: [String!]! = []
  thumbnailBounds: JSON
  thumbnailId: ID
  title: String!
}

input ReviseTagWikiInput {
  content: String!
  tagId: ID!
}

input SetParentTagInput {
  parentTagId: ID!
  tagId: ID!
}

type Space {
  createdAt: DateTime!
  description: String
  externalLinks: [SpaceExternalLink!]!
  followed: Boolean!
  followerCount: Int!
  icon: Image!
  id: ID!
  invitations: [SpaceMemberInvitation!]!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  muted: Boolean!
  name: String!
  postCount: Int!
  posts(mine: Boolean! = false): [Post!]!
  slug: String!
  visibility: SpaceVisibility!
}

type SpaceExternalLink {
  id: ID!
  url: String!
}

type SpaceMember {
  createdAt: DateTime!
  email: String!
  id: ID!
  profile: Profile!
  role: SpaceMemberRole!
}

type SpaceMemberInvitation {
  createdAt: DateTime!
  id: ID!
  receivedEmail: String!
  respondedAt: DateTime
  space: Space!
  state: SpaceMemberInvitationState!
}

enum SpaceMemberInvitationState {
  ACCEPTED
  IGNORED
  PENDING
}

enum SpaceMemberRole {
  ADMIN
  MEMBER
}

enum SpaceMemberState {
  ACTIVE
  INACTIVE
}

enum SpaceState {
  ACTIVE
  INACTIVE
}

enum SpaceVisibility {
  PRIVATE
  PUBLIC
}

type Tag {
  followed: Boolean!
  id: ID!
  muted: Boolean!
  name: String!
  parents: [Tag!]!
  posts(dateBefore: String): [Post!]!
  wiki: TagWiki
}

type TagWiki {
  id: ID!
  lastRevision: TagWikiRevision!
}

type TagWikiRevision {
  content: String!
  createdAt: DateTime!
  id: ID!
}

input UnbookmarkPostInput {
  bookmarkPostId: ID!
}

input UnfollowSpaceInput {
  spaceId: ID!
}

input UnfollowTagInput {
  tagId: ID!
}

input UnlikePostInput {
  postId: ID!
}

input UnlinkUserSingleSignOnInput {
  provider: UserSingleSignOnProvider!
}

input UnlockPasswordedPostInput {
  password: String!
  postId: ID!
}

input UnmuteSpaceInput {
  spaceId: ID!
}

input UnmuteTagInput {
  tagId: ID!
}

input UnsetParentTagInput {
  parentTagId: ID!
  tagId: ID!
}

input UpdatePostOptionsInput {
  contentFilters: [ContentFilterCategory!]
  discloseStats: Boolean
  postId: ID!
  receiveFeedback: Boolean
  receivePatronage: Boolean
  receiveTagContribution: Boolean
  visibility: PostVisibility
}

input UpdatePostViewInput {
  postId: ID!
}

input UpdateSpaceInput {
  description: String
  externalLinks: [String!]
  iconId: ID
  isPublic: Boolean
  name: String
  slug: String
  spaceId: ID!
}

input UpdateSpaceProfileInput {
  profileAvatarId: ID!
  profileName: String!
  spaceId: ID!
}

input UpdateUserContentFilterPreferenceInput {
  action: ContentFilterAction!
  category: ContentFilterCategory!
}

input UpdateUserEmailInput {
  email: String!
}

input UpdateUserMarketingConsentInput {
  consent: Boolean!
}

input UpdateUserNotificationPreferenceInput {
  category: UserNotificationCategory!
  method: UserNotificationMethod!
  opted: Boolean!
}

input UpdateUserProfileInput {
  avatarId: ID!
  name: String!
}

type User {
  bookmarks: [BookmarkGroup!]!
  channelIOMemberHash: String!
  contentFilterPreferences: [UserContentFilterPreference!]!
  email: String!
  followedSpaces: [Space!]!
  followedTags: [Tag!]!
  id: ID!
  likedPosts: [Post!]!
  marketingConsent: UserMarketingConsent
  mutedSpaces: [Space!]!
  mutedTags: [Tag!]!
  notificationPreferences: [UserNotificationPreference!]!
  point: Int!
  posts(state: PostState! = PUBLISHED): [Post!]!
  profile: Profile!
  purchasedPosts: [Post!]!
  receivedSpaceMemberInvitations(state: SpaceMemberInvitationState): [SpaceMemberInvitation!]!
  recentlyViewedPosts: [Post!]!
  singleSignOns: [UserSingleSignOn!]!
  spaces: [Space!]!
  state: UserState!
}

type UserContentFilterPreference {
  action: ContentFilterAction!
  category: ContentFilterCategory!
  id: ID!
}

type UserEmailVerification {
  email: String!
  expiresAt: DateTime!
  id: ID!
  kind: UserEmailVerificationKind!
}

enum UserEmailVerificationKind {
  USER_EMAIL_UPDATE
  USER_LOGIN
}

type UserMarketingConsent {
  createdAt: DateTime!
  id: ID!
}

enum UserNotificationCategory {
  ALL
  COMMENT
  DONATE
  PURCHASE
  REPLY
  SUBSCRIBE
  TAG_EDIT
  TAG_WIKI_EDIT
  TREND
}

enum UserNotificationMethod {
  EMAIL
  WEBSITE
}

type UserNotificationPreference {
  category: UserNotificationCategory!
  id: ID!
  method: UserNotificationMethod!
  opted: Boolean!
}

type UserSingleSignOn {
  email: String!
  id: ID!
  provider: UserSingleSignOnProvider!
}

enum UserSingleSignOnAuthorizationType {
  LINK
  LOGIN
}

enum UserSingleSignOnProvider {
  GOOGLE
  NAVER
}

enum UserState {
  ACTIVE
  INACTIVE
}

"""Represents NULL values"""
scalar Void
