enum ContentFilterAction {
  EXPOSE
  HIDE
  WARN
}

enum ContentFilterCategory {
  ADULT
  ALL_BUT_ADULT
  CRIME
  CRUELTY
  GAMBLING
  GROSSNESS
  HORROR
  INSULT
  OTHER
  PHOBIA
  TRAUMA
  VIOLENCE
}

input CreateSpaceInput {
  name: String!
  slug: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteSpaceInput {
  spaceId: ID!
}

input FinalizeImageUploadInput {
  key: String!
  name: String!
}

type Image {
  id: ID!
  placeholder: String!
  url: String!
}

input IssueUserSingleSignOnAuthorizationUrlInput {
  provider: UserSingleSignOnProvider!
  type: UserSingleSignOnAuthorizationType!
}

type IssueUserSingleSignOnAuthorizationUrlResult {
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createSpace(input: CreateSpaceInput!): Space!
  deleteSpace(input: DeleteSpaceInput!): Space!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  issueUserSingleSignOnAuthorizationUrl(input: IssueUserSingleSignOnAuthorizationUrlInput!): IssueUserSingleSignOnAuthorizationUrlResult!
  login(input: LoginInput!): User!
  logout: Void
  prepareImageUpload: PrepareImageUploadResult!
  requestUserEmailUpdate(input: RequestUserEmailUpdateInput!): Void
  requestUserPasswordReset(input: RequestUserPasswordResetInput!): Void
  resendUserActivationEmail: Void
  resetUserPassword(input: ResetUserPasswordInput!): Void
  signUp(input: SignUpInput!): User!
  unlinkUserSingleSignOn(input: UnlinkUserSingleSignOnInput!): User!
  updateUserContentFilterPreference(input: UpdateUserContentFilterPreferenceInput!): User!
  updateUserMarketingConsent(input: UpdateUserMarketingConsentInput!): User!
  updateUserNotificationPreference(input: UpdateUserNotificationPreferenceInput!): User!
  updateUserPassword(input: UpdateUserPasswordInput!): User!
  updateUserProfile(input: UpdateUserProfileInput!): Profile!
  verifyUserEmail(input: VerifyUserEmailInput!): User!
}

enum PreferenceType {
  FAVORITE
  MUTE
}

type PrepareImageUploadResult {
  key: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image!
  id: ID!
  name: String!
}

type Query {
  authLayoutBackgroundImage: Image
  me: User
  randomAvatars: [String!]!
  sampleImage: Image!
  sampleImages: [Image!]!
  space(slug: String!): Space!
  userEmailVerification(code: String!): UserEmailVerification!
}

input RequestUserEmailUpdateInput {
  email: String!
}

input RequestUserPasswordResetInput {
  email: String!
}

input ResetUserPasswordInput {
  code: String!
  password: String!
  passwordConfirm: String!
}

input SignUpInput {
  email: String!
  marketingConsent: Boolean!
  name: String!
  password: String!
  passwordConfirm: String!
  termsConsent: Boolean!
}

type Space {
  id: ID!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  name: String!
  slug: String!
}

type SpaceMember {
  id: ID!
  profile: Profile!
  role: SpaceMemberRole!
  space: Space!
}

enum SpaceMemberRole {
  MEMBER
  OWNER
}

enum SpaceState {
  ACTIVE
  INACTIVE
}

input UnlinkUserSingleSignOnInput {
  provider: UserSingleSignOnProvider!
}

input UpdateUserContentFilterPreferenceInput {
  action: ContentFilterAction!
  category: ContentFilterCategory!
}

input UpdateUserMarketingConsentInput {
  consent: Boolean!
}

input UpdateUserNotificationPreferenceInput {
  category: UserNotificationCategory!
  enabled: Boolean!
  method: UserNotificationMethod!
}

input UpdateUserPasswordInput {
  newPassword: String!
  newPasswordConfirm: String!
  oldPassword: String
}

input UpdateUserProfileInput {
  name: String!
}

type User {
  contentFilterPreference(category: ContentFilterCategory!): UserContentFilterPreference!
  email: String!
  id: ID!
  marketingConsent: UserMarketingConsent
  notificationPreference(category: UserNotificationCategory!): UserNotificationPreference!
  password: UserPassword
  profile: Profile!
  singleSignOn(provider: UserSingleSignOnProvider!): UserSingleSignOn
  spaces: [Space!]!
  state: UserState!
}

type UserContentFilterPreference {
  action: ContentFilterAction!
}

type UserEmailVerification {
  expiresAt: DateTime!
  id: ID!
}

enum UserEmailVerificationKind {
  USER_ACTIVATION
  USER_EMAIL_UPDATE
  USER_PASSWORD_RESET
}

type UserMarketingConsent {
  createdAt: DateTime!
  id: ID!
}

enum UserNotificationCategory {
  ALL
  COMMENT
  DONATE
  PURCHASE
  REPLY
  SUBSCRIBE
  TAG_EDIT
  TAG_WIKI_EDIT
  TREND
}

enum UserNotificationMethod {
  EMAIL
  WEBSITE
}

enum UserNotificationOpt {
  OPT_IN
  OPT_OUT
}

type UserNotificationPreference {
  email: Boolean!
  website: Boolean!
}

type UserPassword {
  id: ID!
}

type UserSingleSignOn {
  id: ID!
  providerEmail: String!
}

enum UserSingleSignOnAuthorizationType {
  AUTH
  LINK
}

enum UserSingleSignOnProvider {
  GOOGLE
  NAVER
}

enum UserState {
  ACTIVE
  INACTIVE
  PROVISIONAL
}

input VerifyUserEmailInput {
  code: String!
}

"""Represents NULL values"""
scalar Void
