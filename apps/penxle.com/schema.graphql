enum ContentFilteringAction {
  EXPOSE
  HIDE
  WARN
}

enum ContentFilteringCategory {
  ADULT
  ALL_BUT_ADULT
  CRIME
  CRUELTY
  GAMBLING
  GROSSNESS
  HORROR
  INSULT
  OTHER
  PHOBIA
  TRAUMA
  VIOLENCE
}

input CreateSpaceInput {
  name: String!
  slug: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteSpaceInput {
  spaceId: ID!
}

input FinalizeImageUploadInput {
  key: String!
  name: String!
}

type Image {
  id: ID!
  placeholder: String!
  url: String!
}

input IssueSSOAuthorizationUrlInput {
  provider: UserSSOProvider!
  type: UserSSOAuthorizationType!
}

type IssueSSOAuthorizationUrlResult {
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createSpace(input: CreateSpaceInput!): Space!
  deleteSpace(input: DeleteSpaceInput!): Space!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  issueSSOAuthorizationUrl(input: IssueSSOAuthorizationUrlInput!): IssueSSOAuthorizationUrlResult!
  login(input: LoginInput!): User!
  logout: Void
  prepareImageUpload: PrepareImageUploadResult!
  requestEmailUpdate(input: RequestEmailUpdateInput!): Void
  requestPasswordReset(input: RequestPasswordResetInput!): Void
  resendUserActivationEmail: Void
  resetPassword(input: ResetPasswordInput!): Void
  signup(input: SignupInput!): User!
  unlinkSSO(input: UnlinkSSOInput!): User!
  updateContentFilteringPreference(input: UpdateContentFilteringPreferenceInput!): User!
  updateMarketingAgreement(input: UpdateMarketingAgreementInput!): User!
  updateNotificationPreferences(input: UpdateNotificationPreferencesInput!): User!
  updatePassword(input: UpdatePasswordInput!): User!
  updateUserProfile(input: UpdateUserProfileInput!): Profile!
  verifyEmail(input: VerifyEmailInput!): User!
}

type PrepareImageUploadResult {
  key: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image!
  id: ID!
  name: String!
}

type Query {
  authLayoutBackgroundImage: Image
  emailVerification(code: String!): UserEmailVerification!
  me: User
  randomAvatars: [String!]!
  sampleImage: Image!
  sampleImages: [Image!]!
  space(slug: String!): Space!
}

input RequestEmailUpdateInput {
  email: String!
}

input RequestPasswordResetInput {
  email: String!
}

input ResetPasswordInput {
  code: String!
  password: String!
  passwordConfirm: String!
}

input SignupInput {
  email: String!
  isAgreed: Boolean!
  isMarketingAgreed: Boolean!
  name: String!
  password: String!
  passwordConfirm: String!
}

type Space {
  id: ID!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  name: String!
  slug: String!
}

type SpaceMember {
  id: ID!
  profile: Profile!
  role: SpaceMemberRole!
  space: Space!
}

enum SpaceMemberRole {
  MEMBER
  OWNER
}

input UnlinkSSOInput {
  provider: UserSSOProvider!
}

input UpdateContentFilteringPreferenceInput {
  action: ContentFilteringAction!
  category: ContentFilteringCategory!
}

input UpdateMarketingAgreementInput {
  isAgreed: Boolean!
}

input UpdateNotificationPreferencesInput {
  category: UserNotificationCategory!
  isEnabled: Boolean!
  method: UserNotificationMethod!
}

input UpdatePasswordInput {
  newPassword: String!
  newPasswordConfirm: String!
  oldPassword: String
}

input UpdateUserProfileInput {
  name: String!
}

type User {
  contentFilteringPreferences(category: ContentFilteringCategory!): ContentFilteringAction!
  email: String!
  id: ID!
  marketingAgreement: UserMarketingAgreement
  notificationPreferences(category: UserNotificationCategory!): UserNotificationPreference!
  password: UserPassword
  profile: Profile!
  spaces: [Space!]!
  sso(provider: UserSSOProvider!): UserSSO
  state: UserState!
}

type UserEmailVerification {
  expiresAt: DateTime!
  id: ID!
}

type UserMarketingAgreement {
  createdAt: DateTime!
  id: ID!
}

enum UserNotificationCategory {
  ALL
  COMMENT
  DONATE
  PURCHASE
  REPLY
  SUBSCRIBE
  TAG_EDIT
  TAG_WIKI_EDIT
  TREND
}

enum UserNotificationMethod {
  EMAIL
  WEBSITE
}

type UserNotificationPreference {
  email: Boolean!
  website: Boolean!
}

type UserPassword {
  createdAt: DateTime!
  id: ID!
}

type UserSSO {
  email: String!
  id: ID!
  provider: UserSSOProvider!
}

enum UserSSOAuthorizationType {
  AUTH
  LINK
}

enum UserSSOProvider {
  GOOGLE
  NAVER
}

enum UserState {
  ACTIVE
  INACTIVE
  PROVISIONAL
}

input VerifyEmailInput {
  code: String!
}

"""Represents NULL values"""
scalar Void
