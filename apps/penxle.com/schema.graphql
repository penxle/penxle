input AcceptSpaceMemberInvitationInput {
  invitationId: ID!
  profileAvatarId: ID
  profileName: String
}

enum AuthScope {
  STAFF
  USER
}

enum ContentFilterAction {
  EXPOSE
  HIDE
  WARN
}

enum ContentFilterCategory {
  ADULT
  CRIME
  CRUELTY
  GAMBLING
  GROSSNESS
  HORROR
  INSULT
  OTHER
  PHOBIA
  TRAUMA
  TRIGGER
  VIOLENCE
}

input CreateSpaceInput {
  isPublic: Boolean!
  name: String!
  profileAvatarId: ID
  profileName: String
  slug: String!
}

input CreateSpaceMemberInvitationInput {
  email: String!
  role: SpaceMemberRole!
  spaceId: ID!
}

input CreateUserInput {
  marketingConsent: Boolean!
  name: String!
  termsConsent: Boolean!
  token: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteSpaceInput {
  spaceId: ID!
}

input FinalizeImageUploadInput {
  bounds: JSON
  key: String!
  name: String!
}

input IgnoreSpaceMemberInvitationInput {
  invitationId: ID!
}

type Image {
  id: ID!
  placeholder: String!
  url: String!
}

input IssueUserEmailAuthorizationUrlInput {
  code: String!
  email: String!
}

type IssueUserEmailAuthorizationUrlResult {
  url: String!
}

input IssueUserSingleSignOnAuthorizationUrlInput {
  provider: UserSingleSignOnProvider!
  type: UserSingleSignOnAuthorizationType!
}

type IssueUserSingleSignOnAuthorizationUrlResult {
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LeaveSpaceInput {
  spaceId: ID!
}

input LoginUserInput {
  email: String!
}

type Mutation {
  acceptSpaceMemberInvitation(input: AcceptSpaceMemberInvitationInput!): SpaceMemberInvitation!
  createSpace(input: CreateSpaceInput!): Space!
  createSpaceMemberInvitation(input: CreateSpaceMemberInvitationInput!): SpaceMemberInvitation!
  createUser(input: CreateUserInput!): User!
  deleteSpace(input: DeleteSpaceInput!): Space!
  finalizeImageUpload(input: FinalizeImageUploadInput!): Image!
  ignoreSpaceMemberInvitation(input: IgnoreSpaceMemberInvitationInput!): SpaceMemberInvitation!
  issueUserEmailAuthorizationUrl(input: IssueUserEmailAuthorizationUrlInput!): IssueUserEmailAuthorizationUrlResult!
  issueUserSingleSignOnAuthorizationUrl(input: IssueUserSingleSignOnAuthorizationUrlInput!): IssueUserSingleSignOnAuthorizationUrlResult!
  leaveSpace(input: LeaveSpaceInput!): SpaceMember!
  loginUser(input: LoginUserInput!): UserEmailVerification!
  logoutUser: Void
  prepareImageUpload: PrepareImageUploadResult!
  removeSpaceMember(input: RemoveSpaceMemberInput!): SpaceMember
  unlinkUserSingleSignOn(input: UnlinkUserSingleSignOnInput!): User!
  updateUserContentFilterPreference(input: UpdateUserContentFilterPreferenceInput!): User!
  updateUserEmail(input: UpdateUserEmailInput!): Void
  updateUserMarketingConsent(input: UpdateUserMarketingConsentInput!): User!
  updateUserNotificationPreference(input: UpdateUserNotificationPreferenceInput!): User!
  updateUserProfile(input: UpdateUserProfileInput!): Profile!
}

enum PreferenceType {
  FAVORITE
  MUTE
}

type PrepareImageUploadResult {
  key: String!
  presignedUrl: String!
}

type Profile {
  avatar: Image!
  id: ID!
  name: String!
}

type ProvisionedUser {
  avatarUrl: String
  email: String!
  id: ID!
  name: String
}

type Query {
  auth(scope: AuthScope!): Void
  authLayoutBackgroundImage: Image
  me: User
  provisionedUser(token: String!): ProvisionedUser!
  randomAvatars: [String!]!
  sampleImage: Image!
  sampleImages: [Image!]!
  space(slug: String!): Space!
}

input RemoveSpaceMemberInput {
  spaceMemberId: ID!
}

type Space {
  id: ID!
  invitations: [SpaceMemberInvitation!]!
  meAsMember: SpaceMember
  members: [SpaceMember!]!
  name: String!
  slug: String!
}

type SpaceMember {
  id: ID!
  profile: Profile!
  role: SpaceMemberRole!
}

type SpaceMemberInvitation {
  createdAt: DateTime!
  id: ID!
  receivedEmail: String!
  space: Space!
  state: SpaceMemberInvitationState!
}

enum SpaceMemberInvitationState {
  ACCEPTED
  IGNORED
  PENDING
}

enum SpaceMemberRole {
  ADMIN
  MEMBER
}

enum SpaceMemberState {
  ACTIVE
  INACTIVE
}

enum SpaceState {
  ACTIVE
  INACTIVE
}

enum SpaceVisibility {
  PRIVATE
  PUBLIC
}

input UnlinkUserSingleSignOnInput {
  provider: UserSingleSignOnProvider!
}

input UpdateUserContentFilterPreferenceInput {
  action: ContentFilterAction!
  category: ContentFilterCategory!
}

input UpdateUserEmailInput {
  email: String!
}

input UpdateUserMarketingConsentInput {
  consent: Boolean!
}

input UpdateUserNotificationPreferenceInput {
  category: UserNotificationCategory!
  method: UserNotificationMethod!
  opted: Boolean!
}

input UpdateUserProfileInput {
  avatarId: ID!
  name: String!
}

type User {
  contentFilterPreferences: [UserContentFilterPreference!]!
  email: String!
  id: ID!
  marketingConsent: UserMarketingConsent
  notificationPreferences: [UserNotificationPreference!]!
  profile: Profile!
  receivedSpaceMemberInvitations(state: SpaceMemberInvitationState): [SpaceMemberInvitation!]!
  singleSignOns: [UserSingleSignOn!]!
  spaces: [Space!]!
  state: UserState!
}

type UserContentFilterPreference {
  action: ContentFilterAction!
  category: ContentFilterCategory!
  id: ID!
}

type UserEmailVerification {
  email: String!
  expiresAt: DateTime!
  id: ID!
  kind: UserEmailVerificationKind!
}

enum UserEmailVerificationKind {
  USER_EMAIL_UPDATE
  USER_LOGIN
}

type UserMarketingConsent {
  createdAt: DateTime!
  id: ID!
}

enum UserNotificationCategory {
  ALL
  COMMENT
  DONATE
  PURCHASE
  REPLY
  SUBSCRIBE
  TAG_EDIT
  TAG_WIKI_EDIT
  TREND
}

enum UserNotificationMethod {
  EMAIL
  WEBSITE
}

type UserNotificationPreference {
  category: UserNotificationCategory!
  id: ID!
  method: UserNotificationMethod!
  opted: Boolean!
}

type UserSingleSignOn {
  email: String!
  id: ID!
  provider: UserSingleSignOnProvider!
}

enum UserSingleSignOnAuthorizationType {
  LINK
  LOGIN
}

enum UserSingleSignOnProvider {
  GOOGLE
  NAVER
}

enum UserState {
  ACTIVE
  INACTIVE
}

"""Represents NULL values"""
scalar Void
